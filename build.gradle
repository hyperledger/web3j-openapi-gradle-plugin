plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'de.undercouch.download' version '4.1.2'
}

description = 'Gradle plugin providing tasks to generate Web3j-OpenAPI project from Solidity.'
sourceCompatibility = 17

ext {
    web3jVersion = version
}

apply {
    [
        'jacoco',
        'java',
        'javadoc',
        'junit',
        'repositories',
        'spotless',
    ].each { buildScript ->
        download {
            src "https://raw.githubusercontent.com/web3j/build-tools/master/gradle/$buildScript/build.gradle"
            dest "$rootDir/gradle/$buildScript/build.gradle"
            overwrite true
            quiet true
            onlyIfModified true
        }
        from("$rootDir/gradle/$buildScript/build.gradle")
    }
}

repositories {
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    maven {
        url 'https://repo.gradle.org/gradle/libs-releases'
    }
}

dependencies {
    implementation "org.web3j:web3j-gradle-plugin:4.12.2"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin.multiplatform:org.jetbrains.kotlin.multiplatform.gradle.plugin:$kotlinVersion"
    implementation "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:$swaggerGenVersion"
    implementation "io.swagger.core.v3:swagger-gradle-plugin:$swaggerVersion"

    implementation("org.web3j:abi:$web3jVersion") {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }
    implementation("org.web3j:web3j-openapi-codegen:$web3jVersion") {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    testImplementation "jakarta.ws.rs:jakarta.ws.rs-api:$jaxRsApi"

    configurations.all {
        resolutionStrategy {
            force(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-base', version: jacksonVersion)
            force(group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: jacksonVersion)
            force(group: 'io.swagger.core.v3', name: 'swagger-core', version: swaggerVersion)
            force(group: 'io.swagger.core.v3', name: 'swagger-models', version: swaggerVersion)
            force(group: 'io.swagger.core.v3', name: 'swagger-annotations', version: swaggerVersion)
            force(group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion)
        }
    }
}

gradlePlugin {
    website = 'https://web3j.io/'
    vcsUrl = 'https://github.com/web3j/web3j-openapi-gradle-plugin'
    plugins {
        openapi {
            id = 'org.web3j.openapi'
            implementationClass = 'org.web3j.openapi.gradle.plugin.OpenApiPlugin'
            displayName = project.description
            description = 'Gradle plugin providing tasks to generate Web3j-OpenAPI project from Solidity.'
            tags.set([
                'solidity',
                'ethereum',
                'web3.js',
                'web3j',
                'openapi'
            ])
        }
    }
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        new File(generatedResources).mkdirs()
        def generated = new File(generatedResources, "version.properties")
        generated.text = "version=$rootProject.version"
    }
}

tasks.withType(Test) {
    reports.html.destination file("${reporting.baseDir}/${name}")
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

tasks.named("spotlessJava").configure {
    dependsOn("processResources","compileTestKotlin","pluginUnderTestMetadata","processTestResources")
}

tasks.named("spotlessKotlin").configure {
    dependsOn("compileTestKotlin", "processTestResources")
}
